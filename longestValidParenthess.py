# -*- coding: utf-8 -*-
"""
 author: lvsongke@oneniceapp.com
 data:2019/09/11
"""


def longestValidParenthess(s):
    """
    找到字符串中最长的有效的()字符串
    :param s:
    :return:
    """
    # mapping = {")": "("}
    # length = 0
    # stack = []
    # for i in range(len(s) - 1):
    #     if s[i] not in mapping:
    #         continue
    #     if mapping[s[i]] == s[i + 1]:
    #         length += 2
    n = len(s)
    # i, j = 0, 0
    mapping = {'(': ')'}
    while n > 1:
        for i in range(len(s) - n + 1):
            if s[i] not in mapping or s[n + i - 1] in mapping:
                continue
            if mapping[s[i]] == s[n + i - 1]:
                sub_str = s[i: n + i]
                if isValid(sub_str):
                    return len(sub_str)
        if n % 2 == 1:
            n -= 1
        else:
            n -= 2
    return 0
    pass


def isValid(s):
    stack, match = [], {')': '('}
    for ch in s:
        if ch in match:
            if not (stack and stack.pop() == match[ch]):
                return False
        else:
            stack.append(ch)
    return not stack


def solution_use_stack(s):
    stack = [(-1, ')')]
    length = 0
    for i, val in enumerate(s):
        if val == ')' and stack[-1][1] == '(':
            stack.pop()
            length = max(length, i - stack[-1][0])
        else:
            stack.append((i, val))
    return length
    pass


if __name__ == '__main__':
    res = solution_use_stack(


    print(res)
